#!/usr/bin/env perl
use strict;
use warnings;
use YAML::Tiny;

BEGIN {
    $INC{$_} = __FILE__
      for map { ( my $pkg = "$_.pm" ) =~ s!::!/!g; $pkg } (
        qw(
          Server
          ServerManager
          )
      );
}

#################################################
# Server
#################################################
{

    package Server;

    use strict;
    use warnings;
    use Net::Ping;

    our $PING_TIMEOUT = 3;

    sub new {
        my $class = shift;
        my $self  = bless {
            'ip'         => '',
            'is_primary' => '',
            'is_alive'   => '',
            @_,
        }, $class;

        return $self;
    }

    sub is_alive {
        my $self = shift;
        return $self->{is_alive};
    }

    sub is_primary {
        my $self = shift;
        return $self->{is_primary};
    }

    sub health_check {
        my $self = shift;

        $self->{is_alive} = 'true';
        $self->check_ping;
    }

    sub check_ping {
        my $self = shift;

        my $ping = Net::Ping->new();
        unless ( $ping->ping( $self->{ip}, $PING_TIMEOUT ) ) {
            $self->{is_alive} = undef;
        }
        $ping->close;
    }

    1;
}

#################################################
# ServerManager
#################################################
{

    package ServerManager;

    use strict;
    use warnings;
    use Server;

    sub new {
        my $class = shift;
        my $self  = bless {
            servers        => [],
            alive_servers  => [],
            dead_servers   => [],
            failover_script => '',
            @_,
        }, $class;

        return $self;
    }

    sub get_servers {
        my $self = shift;
        return @{ $self->{servers} };
    }

    sub alive_servers {
        my $self = shift;
        return @{ $self->{alive_servers} };
    }

    sub add_alive_server {
        my $self   = shift;
        my $server = shift;
        push @{ $self->{alive_servers} }, $server;
    }

    sub dead_servers {
        my $self = shift;
        return @{ $self->{dead_servers} };
    }

    sub add_dead_server {
        my $self   = shift;
        my $server = shift;
        push @{ $self->{dead_servers} }, $server;
    }

    sub failover_script{
        my $self = shift;
        return $self->{failover_script};
    }

    sub init_servers {
        my $self    = shift;
        my @servers = $self->get_servers();
        $self->{alive_servers} = [];
        $self->{dead_servers}  = [];

        foreach my $server (@servers) {
            if ( $server->{dead} ) {
                $self->add_dead_server($server);
            }
            else {
                $self->add_alive_server($server);
            }
        }
    }

    sub connect_all_servers {
        my $self    = shift;
        my @servers = $self->get_servers;
        $self->{alive_servers} = [];
        $self->{dead_servers}  = [];

        foreach my $target (@servers) {
            $target->health_check;
            if ( $target->is_alive ) {
                $self->add_alive_server($target);
            }
            else {
                $self->add_dead_server($target);
            }
        }
    }

    sub check_primary_alive {
        my $self          = shift;
        my @alive_servers = $self->alive_servers;
        my $is_alive      = undef;

        foreach my $server (@alive_servers) {
            if ( defined $server->is_primary ) {
                $is_alive = 'true';
            }
        }

        return $is_alive;
    }

    sub run_failover {
        my $self = shift;
        my $script = $self->failover_script;

        my $v = `$script`;
        print qq{$v\n};
    }

    1;
}

#################################################
# main routine
#################################################

sub main {
    @ARGV = @_;

    local $/;
    my $config_data = <DATA>;
    my $yaml        = YAML::Tiny->new;
    $yaml = YAML::Tiny->read_string($config_data);
    my $server_config = $yaml->[0]->{servers};

    my @servers;
    foreach my $conf (@$server_config) {
        my $server = new Server(
            'ip'         => $conf->{ip},
            'is_primary' => $conf->{is_primary},
        );

        push( @servers, $server );
    }

    my $failover_script = $yaml->[0]->{failover_script};
    my $manager         = new ServerManager(
        servers         => \@servers,
        failover_script => $failover_script
    );
    $manager->init_servers;

    my $check_interval = $yaml->[0]->{check_interval};
    while (1) {
        $manager->connect_all_servers;
        my $is_primary_alive = $manager->check_primary_alive;
        unless ($is_primary_alive) {
            print qq{Primary Server Down!!\n};
            $manager->run_failover;
            last;
        }

        sleep $check_interval;
    }

    print qq{Done Failover!!\n};
}

main();

__END__
servers:
  -
    ip: 127.0.0.1
    is_primary: true
  -
    ip: 192.168.41.1
failover_script: ls
check_interval: 5
