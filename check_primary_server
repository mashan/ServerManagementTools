#!/usr/bin/env perl
use strict;
use warnings;
use Data::Dumper;

BEGIN {
    $INC{$_} = __FILE__
      for map { ( my $pkg = "$_.pm" ) =~ s!::!/!g; $pkg } (
        qw(
          Server
          ServerManager
          )
      );
}

#################################################
# Server
#################################################
{

    package Server;

    use strict;
    use warnings;
    use Net::Ping;

    sub new {
        my $class = shift;
        my $self  = bless {
            'ip'         => '',
            'is_primary' => '',
            'is_alive'   => '',
            @_,
        }, $class;

        return $self;
    }

    sub init {
        my ( $self, $opts ) = @_;

        $self->{ip}         = $opts->{ip};
        $self->{is_primary} = $opts->{is_primary};
        $self->{is_alive}   = $opts->{is_alive};
    }

    sub is_alive {
        my $self = shift;
        return $self->{is_alive};
    }

    sub check_ping {
        my ( $self, $opts ) = @_;

        my $ping = Net::Ping->new();
        $self->{is_alive} = undef unless $ping->ping( $self->{ip} );
        $ping->close;
    }

    1;
}

#################################################
# ServerManager
#################################################
{

    package ServerManager;

    use strict;
    use warnings;
    use Server;

    sub new {
        my $class = shift;
        my $self  = bless {
            servers       => [],
            alive_servers => [],
            dead_servers  => [],
            @_,
        }, $class;

        return $self;
    }

    sub get_servers {
        my $self = shift;
        return @{ $self->{servers} };
    }

    sub dead_servers {
        my $self = shift;
        return $self->dead_servers;
    }

    sub add_dead_server {
        my $self   = shift;
        my $server = shift;
        push @{ $self->{dead_servers} }, $server;
    }

    sub init_servers {
        my $self    = shift;
        my @servers = $self->get_servers();
        $self->{alive_servers} = [];
        $self->{dead_servers}  = [];

        foreach my $server (@servers) {
            if ( $server->{dead} ) {
                $self->add_dead_server($server);
            }
            else {
                $self->add_alive_server($server);
            }
        }
    }

    sub connect_all_servers {
        my $self    = shift;
        my @servers = $self->get_servers;

        foreach my $target (@servers) {
            $target->check_ping;
            unless ( $target->is_alive ) {
                $self->add_dead_server($target);
            }
        }
    }

    1;
}

#################################################
# main routine
#################################################

sub main {
    @ARGV = @_;

    my $server = new Server( 'ip' => '192.168.41.1', is_primary => 'true', is_alive => 'true');
    use Data::Dumper;
    local $Data::Dumper::Indent = 1;
    local $Data::Dumper::Terse  = 1;
    warn Dumper $server;

    my $manager = new ServerManager( servers => $server );
    warn Dumper $manager;
    $manager->init_servers($server);

    use Data::Dumper;
    local $Data::Dumper::Indent = 1;
    local $Data::Dumper::Terse  = 1;
    warn Dumper $manager;
}

main();
